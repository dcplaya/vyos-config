#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # log stdout format raw daemon debug
    log stdout format raw local0
    log-send-hostname elcarpenter.com

    daemon

    maxconn    5000
  
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy-1.8.0&openssl=1.1.0i&hsts=yes&profile=modern
    # set default parameters to the intermediate configuration
#    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
#    ssl-default-bind-options ssl-min-ver TLSv1.1 no-tls-tickets

#    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256
#    ssl-default-server-options ssl-min-ver TLSv1.1 no-tls-tickets

    # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options prefer-client-ciphers no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets
    
    # https://www.haproxy.com/blog/dynamic-configuration-haproxy-runtime-api/
    # stats socket ipv4@127.0.0.1:9999 level admin
    # stats socket /var/run/haproxy.sock mode 666 level admin
    # stats timeout 2m

#-----------
# Basic Auth Usernames
# To get hashed password
# mkpasswd -m sha-256 $password
#----
# userlist basic-auth-list
#     group is-admin users $USER #, $user2
# 
#     user $USER  password 

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    tcp
    log                     global
    option                  dontlognull
    option                  srvtcpka
    option                  log-separate-errors
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           2m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 750

#---------------------------------------------------------------------
#  stats page is hosted at different port
#---------------------------------------------------------------------
listen stats
  # bind *:32700 ssl crt /etc/ssl/live/elcarpenter.com/elcarpenter.com.pem
  bind *:32700 ssl crt /etc/ssl/live/combined.pem
  mode http
  stats enable
  stats hide-version
  stats realm Haproxy\ Statistics
  stats uri /
  # stats auth "${STAT_USER}:${STAT_PASS}"

#---------------------------------------------------------------------
# apiserver frontend which proxys to the control plane nodes
#---------------------------------------------------------------------
frontend k8s_api_k3s
    bind :6443
    mode tcp
    option tcplog
    
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    use_backend k8s_controlplane-1 if { req.ssl_sni -i cluster-1.elcarpenter.com }
    use_backend k8s_controlplane-2 if { req.ssl_sni -i cluster-2.elcarpenter.com }

    # default_backend k8s_controlplane-2

frontend talos_apiserver
    bind :50000
    mode tcp
    option tcplog
    
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    use_backend talos_controlplane-1 if { req.ssl_sni -i cluster-1.elcarpenter.com }
    use_backend talos_controlplane-2 if { req.ssl_sni -i cluster-2.elcarpenter.com }

    #51default_backend talos_controlplane-1

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------

##
## Frontend for HTTP
##
frontend http-in
    bind :::80 v4v6
    mode http
    option httplog

    tcp-request inspect-delay 5s
    tcp-request content accept if HTTP

    # Carve out exemption for CertBot
    acl acl-LETSENCRYPT path_beg -i /.well-known/

    http-request redirect scheme https unless { ssl_fc } 

    # use_backend letsencrypt if acl-LETSENCRYPT

##
## Frontend for HTTPS
##
frontend public_ssl
    bind :::443 v4v6
    mode tcp
    option tcplog

    log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq ssl_fc_has_sni '%[ssl_fc_has_sni]' sni:'%[capture.req.hdr(0)]' ssl_fc_sni '%[ssl_fc_sni]' ssl_fc_protocol '%[ssl_fc_protocol]' ssl_bc '%[ssl_bc]' ssl_bc_alpn '%[ssl_bc_alpn]' ssl_bc_protocol '%[ssl_bc_protocol]' ssl_c_i_dn '%[ssl_c_i_dn()]' ssl_c_s_dn '%[ssl_c_s_dn()]' ssl_f_i_dn '%[ssl_f_i_dn()]' ssl_f_s_dn '%[ssl_f_s_dn]' ssl_fc_cipher '%[ssl_fc_cipher]' "

    tcp-request inspect-delay 5s
    tcp-request content capture req.ssl_sni len 150
    tcp-request content accept if { req.ssl_hello_type 1 }

    # https://www.haproxy.com/blog/introduction-to-haproxy-maps/
    use_backend %[req.ssl_sni,lower,map_reg(/usr/local/etc/haproxy/maps/tcp-domain2backend-map.txt)]

    default_backend be_sni

##########################################################################
# TLS SNI
#
# When using SNI we can terminate encryption with dedicated certificates.
# Forward to itself so it can terminate SSL
##########################################################################
backend be_sni
    mode tcp
    server fe_sni 127.0.0.1:10444 weight 10 send-proxy-v2-ssl-cn

# handle https incomming
frontend https-in

    # terminate ssl 
    bind 127.0.0.1:10444 accept-proxy ssl strict-sni alpn h2,http/1.1 crt /etc/ssl/live/combined.pem

    mode http
    option forwardfor
    option httplog
    option http-ignore-probes

    # Attempt to fix the "Domain Fronting" issue with wildcard certs
    # More info https://www.mail-archive.com/haproxy@formilux.org/msg40819.html
    http-request set-var(txn.host) hdr(host)
    http-request deny deny_status 400 unless { req.hdr_cnt(host) eq 1 }
    http-request deny deny_status 421 unless { ssl_fc_sni,strcmp(txn.host) eq 0 }
    
    # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
    http-request del-header Proxy

    http-request set-header Host %[req.hdr(host),lower]
    http-request set-header X-Forwarded-Proto https
    http-request set-header X-Forwarded-Host %[req.hdr(host),lower]
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
    http-request add-header Forwarded for=\"[%[src]]\";host=%[req.hdr(host),lower];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]

    # Add hsts https://www.haproxy.com/blog/haproxy-and-http-strict-transport-security-hsts-header-in-http-redirects/
    # http-response set-header Strict-Transport-Security "max-age=16000000; includeSubDomains; preload;"

    # https://www.haproxy.com/blog/introduction-to-haproxy-maps/
    use_backend %[req.hdr(host),lower,map_reg(/usr/local/etc/haproxy/maps/http-domain2backend-map.txt)]

#################################################################################################################################
## backend for PowerDNS Admin
backend powerdns-backend
    mode http

    server powerdns-admin-container 10.0.0.32:8000 check verify none init-addr last,libc,none

## backend for Valetudo (Robot vacuum) GUI
backend valetudo-backend
    mode http

    # Add auth since it will be exposed externally
    # acl auth http_auth_group(basic-auth-list) is-admin
    # http-request auth realm admin unless auth || { src 10.0.0.0/8 }

    server vacuum01 vacuum01.iot.elcarpenter.com:80 check verify none init-addr last,libc,none

## backend for Unifi GUI
backend unifi-backend
    mode http  
  
    # server unifi-cloudkey unifi.server.elcarpenter.com:443 check-ssl ssl verify none init-addr last,libc,none
    server unifi-container unifi-container.elcarpenter.com:8443 check-ssl ssl verify none init-addr last,libc,none

backend proxmox-backend
    mode http
    cookie SERVERID insert nocache
	balance roundrobin
	timeout connect		30000
	timeout server		30000
    
    server proxmox-pve01 pve01.server.elcarpenter.com:8006 check-ssl ssl verify none init-addr last,libc,none cookie S1
    server proxmox-pve02 pve02.server.elcarpenter.com:8006 check-ssl ssl verify none init-addr last,libc,none cookie S2
    server proxmox-pve03 pve03.server.elcarpenter.com:8006 check-ssl ssl verify none init-addr last,libc,none cookie S2

backend s3-backend
    mode http
    balance roundrobin

    server s3-pve01 pve01.server.elcarpenter.com:7480 check verify none init-addr last,libc,none
    server s3-pve02 pve02.server.elcarpenter.com:7480 check verify none init-addr last,libc,none
    server s3-pve03 pve03.server.elcarpenter.com:7480 check verify none init-addr last,libc,none

backend ceph-dashboard
    mode http
    balance roundrobin
    option httpchk GET /
    http-check expect status 200

    server ceph-pve01  pve01.ceph.elcarpenter.com:8443 ssl check verify none init-addr last,libc,none
    server ceph-pve02  pve02.ceph.elcarpenter.com:8443 ssl check verify none init-addr last,libc,none
    server ceph-pve03  pve03.ceph.elcarpenter.com:8443 ssl check verify none init-addr last,libc,none

backend cluster-1-backend
    mode http

    # Enable HTTPS health check
    option ssl-hello-chk

    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }

    server cluster-1 10.200.1.50:443 check-ssl ssl verify none alpn h2,http/1.1

# Status Page
backend status-backend
    mode http
    balance roundrobin
    option httpchk GET /
    http-check expect status 200

# LLDAP Webpage
backend lldap-backend
    mode http
    balance roundrobin
    option httpchk GET /
    http-check expect status 200

    server lldap lldap.elcarpenter.com:17170 check init-addr last,libc,none

# LibreNMS Webpage
backend librenms-backend
    mode http
    balance roundrobin
    option httpchk GET /
    http-check expect status 200

    server librenms librenms.containers.elcarpenter.com:8000 
    # Removed the stuff below from the server line above since the backend is plain HTTP
    # check init-addr last,libc,none

#---------------------------------------------------------------------
# round robin balancing for apiserver
#---------------------------------------------------------------------
backend k8s_controlplane-1
    option httpchk GET /healthz
    http-check expect status 200
    mode tcp
    option ssl-hello-chk
    balance     roundrobin
        server cp1.cluster-1 cp1.cluster-1.elcarpenter.com:6443 check init-addr last,libc,none
        server cp2.cluster-1 cp2.cluster-1.elcarpenter.com:6443 check init-addr last,libc,none
        server cp3.cluster-1 cp3.cluster-1.elcarpenter.com:6443 check init-addr last,libc,none

backend talos_controlplane-1
    option httpchk GET /healthz
    http-check expect status 200
    mode tcp
    option ssl-hello-chk
    balance     roundrobin
        server cp1.cluster-1 cp1.cluster-1.elcarpenter.com:50000 check init-addr last,libc,none
        server cp2.cluster-1 cp2.cluster-1.elcarpenter.com:50000 check init-addr last,libc,none
        server cp3.cluster-1 cp3.cluster-1.elcarpenter.com:50000 check init-addr last,libc,none

backend k8s_controlplane-2
    option httpchk GET /healthz
    http-check expect status 200
    mode tcp
    option ssl-hello-chk
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    balance     roundrobin
        server cp1.cluster-2 cp1.cluster-2.elcarpenter.com:6443 check init-addr last,libc,none
        server cp2.cluster-2 cp2.cluster-2.elcarpenter.com:6443 check init-addr last,libc,none
        server cp3.cluster-2 cp3.cluster-2.elcarpenter.com:6443 check init-addr last,libc,none

backend talos_controlplane-2
    option httpchk GET /healthz
    http-check expect status 200
    mode tcp
    option ssl-hello-chk
    balance     roundrobin
        server cp1.cluster-2 cp1.cluster-2.elcarpenter.com:50000 check init-addr last,libc,none
        server cp2.cluster-2 cp2.cluster-2.elcarpenter.com:50000 check init-addr last,libc,none
        server cp3.cluster-2 cp3.cluster-2.elcarpenter.com:50000 check init-addr last,libc,none

#---------------------------------------------------------------------
# Backends for HTTP/HTTPS Virtual Hosts Proxy
#---------------------------------------------------------------------
backend cluster-1
    mode tcp
    # mode http
    
    # Enable HTTPS health check
    option ssl-hello-chk

    # server cluster-1-traefik 10.200.1.50:443 check
    # http-request set-header X-Forwarded-Port %[dst_port]
    # http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server traefik 10.200.1.50:443 check-ssl verify none send-proxy-v2


backend cluster-2
    mode tcp
    # mode http

    # Enable HTTPS health check
    option ssl-hello-chk

    # server cluster-1-traefik 10.200.1.50:443 check
    # http-request set-header X-Forwarded-Port %[dst_port]
    # http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server external-nginx 10.200.2.50:443 check-ssl verify none send-proxy-v2

#---------------------------------------------------------------------
# Proxmox VNC Connections
#---------------------------------------------------------------------

listen proxmox_spice
        bind :3128
	# mode http
        mode tcp
    option tcplog
	option tcpka
	balance roundrobin
	server pve01 pve01.server.elcarpenter.com:3128 weight 1 init-addr last,libc,none
	server pve02 pve02.server.elcarpenter.com:3128 weight 1 init-addr last,libc,none
    server pve03 pve03.server.elcarpenter.com:3128 weight 1 init-addr last,libc,none

